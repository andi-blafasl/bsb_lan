#!/bin/bash

FILE=BSB_lan.ino


if [ $# -gt 0 ]; then
	FILE=$1
fi

cat $FILE | gawk -F ',' '
	/^{0x|^{CMD/{
		# delete leading and trailing spaces
		gsub(/^[ \t]+|[ \t]+$/,"",$1);
		gsub(/^[ \t]+|[ \t]+$/,"",$2);
		gsub(/^[ \t]+|[ \t]+$/,"",$3);
		gsub(/^[ \t]+|[ \t]+$/,"",$4);
		gsub(/^[ \t]+|[ \t]+$/,"",$5);
		gsub(/^[ \t]+|[ \t]+$/,"",$6);
		gsub(/^[ \t]+|[ \t]+$/,"",$7);
		gsub(/^[ \t]+|[ \t]+$/,"",$8);
		# ensure all command IDs are in lower case
		if($1 ~ /0x/) $1=tolower($1);
				
		# statistics
		total_cnt++;
		if($1 ~ /CMD_UNKNOWN/){
			cmd_unknown_cnt++;
			if($3 ~ /VT_UNKNOWN/){
				cmd_unknown_without_type_cnt++;
			}
		}else{
			if($3 ~ /VT_UNKNOWN/){
				cmd_known_without_type_cnt++;
			}			
		}
		if($1 !~ /CMD_UNKNOWN/){
			cmd[$1]++;
			if(cmd[$1]>1){
				print "// !FIXME! !AUTOGENERATED! same cmd as "cmd_first_line[$1];
			}else{
				cmd_first_line[$1]=$4;
			}
		}
		regex="STR"$4;
		if($5 !~ regex ){
			print "DESC ERROR: " $0 > "/dev/stderr";
			wrong_desc_cnt++;
		}
		if($6 != 0){
			enum_cnt++;			
			regex="ENUM"$4;
			if($6 !~ regex){
				print "ENUM SIZE ERROR (regex "regex"!~"$6"): " $0 > "/dev/stderr";
				wrong_enum_size_cnt++;
			}
			regex="ENUM"$4;
			if($7 !~ regex){
				print "ENUM ERROR: " $0 > "/dev/stderr";
				wrong_enum_cnt++;
			}
			if($3 !~ /VT_ENUM/){
				print "ENUM TYPE ERROR: " $0 > "/dev/stderr";
				wrong_type_enum_cnt++;
			}
		}
		
		# append separator
		$1=$1","; # cmdID
		$2=$2","; # category
		$3=$3","; # type
		$4=$4","; # line number 
		$5=$5","; # description
		$6=$6","; # size of enum
		$7=$7","; # enum

		# output with indentation
		printf("%-13s %-21s %-17s %-6s %-9s %-19s %-12s", $1, $2, $3, $4, $5, $6, $7);
		# output of rest of the line (comment)
		for(i=8;i<=NF;i++) printf("%s",$i);
		printf("\n");
		
		# analyses of field length for indentation
		for(i=1;i<=NF;i++){
			l=length($i);
			len[i]=l>len[i]?l:len[i];
		}
		next;
	}
	{
		print
	}
	END{
		# analyses of field length for indentation
		for(i in len){
			printf("len[%d]: %d\n",i,len[i]) > "/dev/stderr"
		}
		printf("total: %d\n",total_cnt) > "/dev/stderr"
		printf("unknown cmds: %d\n",cmd_unknown_cnt) > "/dev/stderr"
		printf("unknown cmds without type: %d\n",cmd_unknown_without_type_cnt) > "/dev/stderr"
		printf("known cmds without type: %d\n",cmd_known_without_type_cnt) > "/dev/stderr"
		printf("cmds with wrong description: %d\n",wrong_desc_cnt) > "/dev/stderr"
		printf("cmds with enum type: %d\n",enum_cnt) > "/dev/stderr"
		printf("cmds with wrong enum size: %d\n",wrong_enum_size_cnt) > "/dev/stderr"
		printf("cmds with wrong enum: %d\n",wrong_enum_cnt) > "/dev/stderr"
		printf("cmds with enum but wrong type: %d\n",wrong_type_enum_cnt) > "/dev/stderr"
		
		for(i in cmd){
			if(cmd[i]>1)
				printf("cmdid %s occurs %d times\n",i,cmd[i]) > "/dev/stderr"
		}
	}
'
